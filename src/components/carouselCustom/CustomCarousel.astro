---
import CustomCard, { type Prop as CardProps } from "./CustomCard.astro";

export interface Props {
  items: CardProps[];
}

const { items } = Astro.props;
---

<div class="relative overflow-hidden rounded">
  <div class="flex">
    {
      items.map((item) => (
        <div class="w-[38%] flex-shrink-0 card-slide">
          <CustomCard {...item} />
        </div>
      ))
    }
  </div>
  <div class="flex items-baseline justify-center mt-10">
    <button
      class="bg-black bg-secondary text-white py-2 px-4 rounded-full"
      id="prev">&#60;</button
    >
    <div id="progress-bar" class="w-[50%]">
      <span
        role="progressbar"
        aria-labelledby="ProgressLabel"
        aria-valuenow="75"
        class="block rounded-full bg-gray-200"
      >
        <!-- TODO: Make progresive the bar -->
        <span class="block h-3 rounded-full bg-main" style="width: 20%"></span>
      </span>
    </div>
    <button
      class="bg-black bg-secondary text-white py-2 px-4 rounded-full"
      id="next">&#62;</button
    >
  </div>
</div>

<script>
  const nextButton = document.getElementById("next");
  const prevButton = document.getElementById("prev");
  let currentSlide = 0;

  const slides = document.querySelectorAll<HTMLElement>(".card-slide");

  function showSlide(index) {
    slides.forEach((slide, i) => {
      let distanceFromCurrent = i - index;
      slide.style.transform = `translateX(${distanceFromCurrent * 33.33}%)`;
    });
  }

  function prevSlide() {
    currentSlide = currentSlide === 0 ? slides.length - 1 : currentSlide - 1;
    showSlide(currentSlide * 2.5);
  }

  function nextSlide() {
    currentSlide = currentSlide === slides.length - 1 ? 0 : currentSlide + 1;
    showSlide(currentSlide * 2.5);
  }
  nextButton.addEventListener("click", () => {
    nextSlide();
  });
  prevButton.addEventListener("click", () => {
    prevSlide();
  });
  showSlide(currentSlide);
</script>
